{"version":3,"sources":["components/buttons/ButtonText.tsx","components/AppBar.tsx","components/buttons/Button.tsx","components/buttons/ButtonAccent.tsx","components/buttons/ToggleButton.tsx","components/inputs/slider.tsx","components/visualizers/sortingAlgorithms/template.functions.ts","components/visualizers/sortingAlgorithms/MergeSort.tsx","components/visualizers/sortingAlgorithms/QuickSort.tsx","components/visualizers/sortingAlgorithms/HeapSort.ts","components/visualizers/sortingAlgorithms/InsertionSort.ts","components/visualizers/sortingAlgorithms/SelectionSort.ts","components/visualizers/SortingVisualizer.tsx","components/inputs/TextField.tsx","components/visualizers/searching/searchingAlgorithms.tsx","components/visualizers/searching/SearchingVisualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonText","props","title","id","className","onClick","handleClick","style","opacity","disabled","pointerEvents","color","active","label","AppBar","useState","activeTab","set_activeTab","activeTabIndicator","n","handleChangeTab","Grid","container","width","position","margin","top","overflow","borderRadius","item","xs","md","Box","component","p","mt","ml","href","display","justifyContent","alignItems","value","Button","padding","ButtonAccent","type","fontSize","ToggleButton","classN","toggleOn","on","set_on","e","height","Slider","onInput","target","prog","document","getElementById","handleInput","min","max","step","GREEN","PURPLE","RED","ACC","bars","getElementsByClassName","changeColor","index","COLOR","transition","backgroundColor","changeHeight","HEIGHT","arr","ANIMATION_SPEED","descend","animations","MergeSort","nums","speed","descending","callback","returnFrames","divide","Object","assign","length","x","setTimeout","animate","left","right","mid","Math","floor","leftsize","rightsize","leftsub","slice","rightsub","i","j","k","push","merge","mainArray","isDescending","CHANGE","REVERT","SWAP_CHANGE","SWAP_REVERT","sort","midIndex","DIVIDING_POINT","PIVOT","temporary","partition_descending","partition_ascending","QuickSort","numbers","STATE","VALUE_1","VALUE_2","HeapSort","animation_speed","halfSize","heapify","temp","size","root","largest","InsertionSort","Array","y","first","SortingVisualizer","algoOptionsOpen","set_algoOptionsOpen","chosenAlgo","set_chosenAlgo","sortingSpeed","set_sortingSpeed","sortDisabled","set_sortDisabled","generateBtn_disabled","set_generateBtn_disabled","arraySizeButton","set_arraySizeButton","sortSpeed","set_sortSpeed","set_descending","disableDescending","set_disableDescending","sortingAlgoList","arraySize","set_arraySize","generateRandom","array","random","randomNumbers","set_randomNumbers","enablePanels","t","hidden","pl","map","algo","flex","num","m","flexDirection","alignContent","pb","textAlign","changeArraySize","changeSpeed","bottom","indexOf","min_idx","SelectionSort","swapped","BubbleSort","memo","TextInput","placeholder","placeHolder","autoFocus","autofocus","event","error","fullWidth","LINEAR_SEARCH_ANIMATIONS","BINARY_SEARCH_ANIMATIONS","getAnimations","searchItem","newFrame","state","lookupIndex","steps","fill_LinearAnimationFrames","sortedArray","binSearch","a","b","fill_BinaryAnimationFrames","lowerBound","upperBound","NoOfSteps","midElement","SearchingVisualizer","searchSize","setSearchSize","setsearchItem","searchArray","setSearchArray","searchSpeed","setSearchSpeed","SortedsearchArray","useRef","sorted","linearSearchMessage","set_linearSearchMessage","binarySearchMessage","set_binarySearchMessage","linearMessageColor","setLinearMessageColor","binaryMessageColor","setBinaryMessageColor","timeouts","lfound","setlfound","bfound","setbfound","animationFrames","CLASSNAME","numberOfFrames","frame","red","executeFrame","changeMessage","ms","items","useEffect","current","mr","each","idx","newSize","alert","ANIMATIONS","LINEAR_ANIMATION","BINARY_ANIMATION","binarySearchWorstTime","log2","clearTimeout","App","currentOpenTab","set_currentOpenTab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6e8561ec.chunk.js","sourcesContent":["export default function ButtonText(props: any)\n{\n    return (\n        <button \n            title={props.title} \n            id={props.id}\n            className={\"btn text-btn\"} \n            onClick={props.handleClick}\n            style={{opacity: props.disabled ? '.4' : '1', \n                    pointerEvents: props.disabled ? 'none':'visible',\n                    color: (props.active ? '#0AFFEF': 'white')}}\n            >\n                \n                {props.label}\n        </button>\n    )\n}","import {Box, Grid} from '@material-ui/core';\nimport {useState} from 'react';\nimport ButtonText from './buttons/ButtonText';\n\n\nexport default function AppBar (props: any) {\n\n   const [activeTab, set_activeTab] = useState(0);\n\n   function activeTabIndicator (n: number) {\n      set_activeTab(n);\n      props.handleChangeTab(n);\n   }\n\n   return (\n      <Grid\n         container\n         className=\"flat-big f-color1\"\n         style={{\n            width: '98vw', position: 'relative',\n            margin: 'auto', top: '1rem', overflow: 'hidden',\n            borderRadius: '10px'\n         }}\n      >\n         <Grid\n            item xs={6} md={2}\n         >\n            <Box component=\"h2\" p={1} mt={2} ml={1}>\n               <a href=\"#\"> AA Visualizer </a>\n            </Box>\n         </Grid>\n\n         <Grid\n            item xs={12} md={8}\n         >\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" mt={1}>\n               <ButtonText active={activeTab === 0} handleClick={() => activeTabIndicator(0)} className=\"app-tabs\" label=\"Sorting\" id=\"sort-v-btn\" value=\"0\" />\n               <ButtonText active={activeTab === 1} handleClick={() => activeTabIndicator(1)} className=\"app-tabs\" label=\"Searching\" id=\"search-v-btn\" value=\"1\" />\n            </Box>\n\n         </Grid>\n\n         <Grid\n            item xs={4} md={2}\n            className=\"abs-right\"\n         >\n         </Grid>\n      </Grid>\n   );\n}","export default function Button(props: any)\n{\n\n    return (\n        <button \n            title={props.title} \n            id={props.id}\n            className={\"oval flat btn b-accent \"} \n            onClick={props.handleClick}\n            style={{opacity: props.disabled ? '.4' : '1', \n                    pointerEvents: props.disabled ? 'none' : 'visible',\n                    padding: '.2rem 1.7rem'}}\n            >\n                {props.label}\n        </button>\n    )\n}","\nexport default function ButtonAccent(props: any)\n{\n    return (\n        <button \n            title={props.title} \n            id={props.id}\n            className={\"oval flat btn \" + props.type} \n            onClick={props.handleClick}\n            style={{opacity: props.disabled ? '.4' : '1', \n                    pointerEvents: props.disabled ? 'none':'visible',\n                    padding: '0 2rem',\n                    borderRadius: '30px',\n                color: props.type === \"error\" ? 'white' : '$b-prime',\n                fontSize: '1.2rem'\n            }}>\n\n                {props.label}\n        </button>\n    )\n}","import {useState} from 'react';\n\nexport default function ToggleButton(props: any)\n{\n    const [on, set_on] = useState(props.toggleOn);\n\n    function handleClick(event: any) {\n        set_on(!on);\n        props.handleClick();\n    }\n\n    let classN;\n    if(!on) classN = \"oval thin-inset toggle-btn \";\n    else classN = \"oval thin-inset toggle-btn-on \" + props.color;\n\n    return(\n        <div\n            title={props.title}\n            className={classN}\n            id={props.id}\n            onClick={(e) => handleClick(e)}\n            style={{width: '50px', height: '16px',\n                    opacity: props.disabled ? '.4' : '1',\n                    pointerEvents: props.disabled ? 'none':'visible'}}\n            >   \n        </div>\n    )\n}","export default function Slider(props: any)\n{   \n    function handleInput(e: any) {\n        const value = e.target.value;\n        let prog = document.getElementById(props.id);        \n        if(prog) {\n            prog.style.width = (value/2) + \"px\";\n        }\n        props.onInput(value);\n    }\n\n    return(\n        <div \n            className=\"d-inline relative slider\"\n            style={{\n                opacity: props.disabled ? '.4' : '1',\n                pointerEvents: props.disabled ? 'none' : 'visible',\n                overflow: 'hidden',\n                padding: '.5rem'\n            }}\n            >\n                <input \n                    onInput={(e) => handleInput(e)}\n                    className={\"slider-\" + props.color} \n                    type=\"range\" \n                    min={props.min}\n                    max={props.max} \n                    value={props.value}\n                    title={props.title}\n                    step='1'\n                    style={{width: (props.max/2) + \"px\"}}\n                    />\n                <div className={\"slider-progress-\" + props.color} id={props.id}></div>\n        </div>  \n    )\n}","export const GREEN = \"yellowgreen\";\nexport const PURPLE = \"purple\";\nexport const RED = \"#dd6f74\";\nexport const ACC = \"#80ED99\";\nexport const GREY = \"rgba(255,255,255,.4)\";\n// actual array bars on the screen\nlet bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\n\nexport function changeColor(index: number, COLOR: string)\n{    \n    if (bars[index]) {\n        bars[index].style.transition = '0ms';\n        bars[index].style.backgroundColor = COLOR;\n    } \n}\n\nexport function changeHeight(index: number, HEIGHT: number)\n{\n    if (bars[index]) bars[index].style.height = HEIGHT+\"px\";\n}","import { changeColor, changeHeight, PURPLE, ACC } from './template.functions';\nlet arr = [] as number[];\n// this will be updated using the props\nlet ANIMATION_SPEED = 40;\nlet descend = false;\n// containers of Animation Sequence\nlet animations = [] as any;\n// The function below is where the animation happens\n// the sequence divided for every triplet\n// the first of the triplet is when the values are being compared thus changing its color\n// the second of the tripled is when the values compared and revert its original color\n// you can better notice that in smaller array\n// finally, the third of the triplet is where the changing the height of a bar\n\n// ======================== ANIMATE =======================\nfunction animate() {\n   for (let x = 0; x < animations.length; x++) {\n      // change the color if the current iteration is not the third of the triplet\n      // example 1: if x = 0 then x % 3 = 0 and not 2 then change the color.\n      // example 2: if x = 1 then x % 3 = 0 and not 2 then revert the original color.\n      // example 3: if x = 2 then x % 3 = 2 then change the size;\n      const isColorChange = x % 3 !== 2;\n      if (isColorChange) {\n         const color = x % 3 === 0 ? PURPLE : ACC;\n         setTimeout(() => {\n            changeColor(animations[x][0], color);\n            changeColor(animations[x][1], color);\n\n         }, x * ANIMATION_SPEED);\n      }\n      // else change the height\n      else {\n         setTimeout(() => {\n            changeHeight(animations[x][0], animations[x][1]);\n         }, (x) * (ANIMATION_SPEED));\n      }\n   }\n}\n// ======================== entry point =======================\nexport default function MergeSort(nums: number[], speed: number, descending: boolean, callback: Function, returnFrames?: boolean) {\n   ANIMATION_SPEED = 200 - speed;\n   descend = descending;\n   animations = [];\n   arr = Object.assign([], nums);\n   // call the actual merge Sort to push all the animations\n   divide(0, arr.length - 1);\n\n   if (returnFrames) return animations;\n\n   // actual animation\n   animate();\n   callback(animations.length)\n}\n\n// ====================== MERGE SORT DIVIDE ============================\nfunction divide(left: number, right: number) {\n   if (left >= right)\n      return;\n   const mid = Math.floor((right + left) / 2)\n   // left half\n   divide(left, mid)\n   // right helf\n   divide(mid + 1, right)\n   // merge left and right\n   merge(left, mid, right);\n}\n// ====================== MERGE SORT COMBINE ============================\nfunction merge(left: number, mid: number, right: number) {\n   const leftsize = mid - left + 1;\n   const rightsize = right - mid;\n   const leftsub = arr.slice(left, mid + 1);\n   const rightsub = arr.slice(mid + 1);\n   let i = 0;\n   let j = 0;\n   let k = left;\n   while (i < leftsize && j < rightsize) {\n      // push two animations for color changes\n      animations.push([k, (left + leftsize) + j]);\n      // push the second time to revert the color\n      animations.push([k, (left + leftsize) + j]);\n      if (descend) {\n         if (leftsub[i] > rightsub[j]) {\n            // push the Height changes\n            animations.push([k, leftsub[i]]);\n            arr[k] = leftsub[i];\n            i++; k++;\n         }\n         else {\n            // push the Height changes\n            animations.push([k, rightsub[j]]);\n            arr[k] = rightsub[j];\n            j++; k++;\n         }\n         continue;\n      }\n      if (leftsub[i] < rightsub[j]) {\n         // push the Height changes\n         animations.push([k, leftsub[i]]);\n         arr[k] = leftsub[i];\n         i++; k++;\n      }\n      else {\n         // push the Height changes\n         animations.push([k, rightsub[j]]);\n         arr[k] = rightsub[j];\n         j++; k++;\n      }\n   }\n   while (i < leftsize) {\n      // here we should push a TRIPLET to maintain the ratio of the animatino sequence\n      animations.push([left + i, left + i]);\n      animations.push([left + i, left + i]);\n      animations.push([k, leftsub[i]]);\n\n      arr[k] = leftsub[i];\n      i++;\n      k++;\n   }\n\n   while (j < rightsize) {\n      animations.push([right + j, right + j]);\n      animations.push([right + j, right + j]);\n      animations.push([k, rightsub[j]]);\n\n      arr[k] = rightsub[j];\n      j++;\n      k++;\n   }\n}\n","// `\n// ANIMATION STRATEGY: \n//     Each iteraton in animations array is also an array\n//     that has 3 elements. \n// Examples:\n//      [CHANGE, index, pivot],\n//      [REVERT, index, pivot],\n//      [SWAP_CHANGE, index1, index2],\n//      [SWAP_REVERT, index1, index2]\n// Basically, this means that if we found a CHANGE,\n// we will change the color of the bars[index],\n// if we found a REVERT then change its color back to normal,\n// if SWAP_CHANGE, change their colors and swap. \n// That means that the height of bars[inde1] will be the \n// height of bars[index2] and vice versa.\n// Finally, if we found SWAP_REVERT we will just simply \n// change the color back to normal\n// `\n\nimport {\n    changeColor,\n    changeHeight,\n    PURPLE,\n    RED,\n    GREEN,\n    ACC\n} from './template.functions';\n\n//  ======================================== DEPENDENT  VARIABLES <<<\nlet mainArray = [] as number[];\n// this will be updated using the props\nlet ANIMATION_SPEED = 40;\n// containers of Animation Sequence\nlet animations = [] as any;\nlet isDescending = false;\n\n// ========================================= INDEPENDENT VARIABLES\n// this will be use for identifyig \n// animation sequences\nconst CHANGE = \"change\";\nconst REVERT = \"revert\";\nconst SWAP_CHANGE = \"swap_change\";\nconst SWAP_REVERT = \"swap_revert\";\n\n// ==================================================== ANIMATION animate()\nfunction animate() {\n    for (let x = 0; x < animations.length; x++) {\n        const STATE = animations[x][0];\n        const VALUE_1 = animations[x][1];\n        const VALUE_2 = animations[x][2];\n        if (STATE === CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, PURPLE);\n                changeColor(VALUE_2, RED);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === REVERT) {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === SWAP_CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, GREEN);\n                changeColor(VALUE_2, GREEN);\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\n            }, x * ANIMATION_SPEED);\n        }\n        else {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n    }\n}\n\n// ===================================================== PARTITION DESCENDING\nfunction partition_descending(left: number, right: number, PIVOT: number) {    \n    while (left <= right) {\n        // here we will push the animation comparision\n        // example: animation.comparision.push([left, right])\n        // because we are comparing left and right\n        while (mainArray[left] > PIVOT){\n            animations.push([\n                CHANGE,\n                left,\n                PIVOT\n            ])\n            animations.push([\n                REVERT,\n                left,\n                PIVOT\n            ])\n            left++;\n        }\n        while (mainArray[right] < PIVOT){\n            animations.push([\n                CHANGE,\n                right,\n                PIVOT\n            ])\n            animations.push([\n                REVERT,\n                right,\n                PIVOT\n            ])\n            right--; \n        }\n        if (left <= right) {\n            animations.push([\n                SWAP_CHANGE,\n                left,\n                right\n            ])\n            animations.push([\n                SWAP_REVERT,\n                left,\n                right\n            ])\n            // here I'm swapping left and aright\n            let temporary = mainArray[left];\n            mainArray[left] = mainArray[right];\n            mainArray[right] = temporary;\n\n            left++;\n            right--;\n        }\n    }\n    return left;\n}\n\n// ===================================================== PARTITION ASCENDING\nfunction partition_ascending(left: number, right: number, PIVOT: number) {    \n    while (left <= right) {\n        // here we will push the animation comparision\n        // example: animations.comparision.push([left, right])\n        // because we are comparing left and right\n        while (mainArray[left] < PIVOT) {\n            animations.push([\n                CHANGE,\n                left,\n                PIVOT\n            ])\n            animations.push([\n                REVERT,\n                left,\n                PIVOT\n            ])\n            left++;\n        }\n            \n        while (mainArray[right] > PIVOT) {\n            animations.push([\n                CHANGE,\n                right,\n                PIVOT\n            ])\n            animations.push([\n                REVERT,\n                right,\n                PIVOT\n            ])\n            right--; \n        }\n               \n        if (left <= right) {\n            animations.push([\n                SWAP_CHANGE,\n                left,\n                right\n            ])\n            animations.push([\n                SWAP_REVERT,\n                left,\n                right\n            ])\n            // here I'm swapping left and aright\n            let temporary = mainArray[left];\n            mainArray[left] = mainArray[right];\n            mainArray[right] = temporary;\n            left++;\n            right--;\n        }\n    }\n    return left;\n}\n\n// ===================================================== SORT\nfunction sort(left: number, right: number) {\n    if (left >= right)\n        return;\n    // here I choose the middle element as a PIVOT\n    let midIndex = (left + right) / 2;\n    // console.log(midIndex);\n    // make sure to always floor the mid to avoid infinite loop\n    midIndex = Math.floor(midIndex);\n    let PIVOT = mainArray[midIndex];\n    // here, partition should return the index of the pivot \n    // or the element that is already in correct position\n    let DIVIDING_POINT: number;\n    if(isDescending)\n        DIVIDING_POINT = partition_descending(left, right, PIVOT);\n    else\n        DIVIDING_POINT = partition_ascending(left, right, PIVOT);\n    sort(left, DIVIDING_POINT - 1);\n    sort(DIVIDING_POINT, right);\n}\n\n// ================================================== ENTRY POINT\nexport default function QuickSort(\n    numbers: number[],\n    speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean)\n{\n    ANIMATION_SPEED = 200 - speed;\n    isDescending = descending;  \n    mainArray = Object.assign([], numbers);\n    // always clear the animations \n    animations = [];\n    // ACTUAL QUICK SORT CALL\n\n    sort(0, mainArray.length - 1);\n    if (returnFrames) return animations;\n    animate();\n    callback(animations.length);\n}","import {\n    changeColor,\n    changeHeight,\n    ACC, RED, PURPLE, GREEN\n}\n    from './template.functions'\n\n// ======================================= dependent Variables\nlet mainArray = [] as number[];\n// this will be updated using the props\nlet ANIMATION_SPEED = 40;\n// containers of Animation Sequence\nlet animations = [] as any;\nlet isDescending = false;\n\n// ======================================= constants Variables\n// this will be use for identifyig \n// animation sequences\nconst CHANGE = \"change\";\nconst REVERT = \"revert\";\nconst SWAP_CHANGE = \"swap_change\";\nconst SWAP_REVERT = \"swap_revert\";\n\n// ======================================= ENTRY POINT\nexport default function HeapSort(\n    numbers: number[],\n    animation_speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean\n)\n{\n    ANIMATION_SPEED = 200 - animation_speed;\n    isDescending = descending;\n    mainArray = Object.assign([], numbers);\n    animations = [];\n    // actual call of heapsort algorithm\n    sort();\n    if (returnFrames) return animations;\n    // animate\n    animate();\n    callback(animations.length)\n}\n\n// ======================================== animation \nfunction animate() {\n    \n    for (let x = 0; x < animations.length; x++) {\n        const STATE = animations[x][0];\n        const VALUE_1 = animations[x][1];\n        const VALUE_2 = animations[x][2];\n        if (STATE === CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, PURPLE);\n                changeColor(VALUE_2, RED);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === REVERT) {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === SWAP_CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, GREEN);\n                changeColor(VALUE_2, GREEN);\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\n            }, x * ANIMATION_SPEED);\n        }\n        else {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n    }\n}\n\n\n// ======================================== Sort\nfunction sort() {\n    let halfSize = mainArray.length / 2;\n    halfSize = Math.floor(halfSize);\n    \n    for (let x = halfSize; x >= 0; x--) {\n        heapify(mainArray.length, x);\n    }\n    for (let x = mainArray.length - 1; x > 0; x--)\n    {\n        animations.push([SWAP_CHANGE, x, 0])\n        animations.push([SWAP_REVERT, x, 0])\n        const temp = mainArray[0];\n        mainArray[0] = mainArray[x]\n        mainArray[x] = temp;\n        heapify(x, 0);\n    }\n}\n\nfunction heapify(size: number, root: number) {\n    if (root >= size)\n        return;\n    let largest = root;\n    let left = (2 * root) + 1;\n    let right = (2 * root) + 2;\n\n    if (left < size) {\n        // comparision\n        animations.push([CHANGE, left, root])\n        animations.push([REVERT, left, root])\n\n        if (!isDescending) {\n            if (mainArray[left] > mainArray[largest]) {    \n\n                // animations.push([SWAP_CHANGE, left, root])\n                // animations.push([SWAP_REVERT, left, root])\n\n                // const temp = mainArray[left];\n                // mainArray[left] = mainArray[root];\n                // mainArray[root] = temp;\n                largest = left;\n            }    \n        }\n        else {\n            if (mainArray[left] < mainArray[largest]) {\n\n                // animations.push([SWAP_CHANGE, left, root])\n                // animations.push([SWAP_REVERT, left, root])\n               \n                // const temp = mainArray[left];\n                // mainArray[left] = mainArray[root];\n                // mainArray[root] = temp;\n\n                largest = left;\n            }\n        }\n            \n    }\n    if (right < size) {\n        // comparision\n        animations.push([CHANGE, right, root])\n        animations.push([REVERT, right, root])\n        if (!isDescending) {\n          \n            if (mainArray[right] > mainArray[largest]) {\n\n                // animations.push([SWAP_CHANGE, right, root])\n                // animations.push([SWAP_REVERT, right, root])\n               \n                // const temp = mainArray[right];\n                // mainArray[right] = mainArray[root];\n                // mainArray[root] = temp;\n\n                largest = right;\n            }\n        }\n        else {\n            if (mainArray[right] < mainArray[largest]) {\n\n                // animations.push([SWAP_CHANGE, right, root])\n                // animations.push([SWAP_REVERT, right, root])\n                \n                // const temp = mainArray[right];\n                // mainArray[right] = mainArray[root];\n                // mainArray[root] = temp;\n\n                largest = right;\n            }\n        }\n    }\n    if(largest != root) {\n        animations.push([SWAP_CHANGE, largest, root])\n        animations.push([SWAP_REVERT, largest, root])\n        \n        const temp = mainArray[root];\n        mainArray[root] = mainArray[largest];\n        mainArray[largest] = temp;\n        heapify(size, largest);\n    }\n    // heapify(size, right);\n}","import {\n    changeColor,\n    changeHeight,\n    ACC, RED, PURPLE, GREEN\n}\n    from './template.functions'\n\n// ======================================= dependent Variables\nlet ANIMATION_SPEED = 40;\nlet mainArray = [] as any;\n// containers of Animation Sequence\nlet animations = [] as any;\n\n// ======================================= constants \n// this will be use for identifyig \n// animation sequences\nconst CHANGE = \"change\";\nconst REVERT = \"revert\";\nconst SWAP_CHANGE = \"swap_change\";\nconst SWAP_REVERT = \"swap_revert\";\n\n// =========================================== ANIMATE\n\nfunction animate() {\n    \n    for (let x = 0; x < animations.length; x++) {\n        const STATE = animations[x][0];\n        const VALUE_1 = animations[x][1];\n        const VALUE_2 = animations[x][2];\n        if (STATE === CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, PURPLE);\n                changeColor(VALUE_2, RED);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === REVERT) {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === SWAP_CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, GREEN);\n                changeColor(VALUE_2, GREEN);\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\n            }, x * ANIMATION_SPEED);\n        }\n        else {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n    }\n}\n\n\n// =========================================== ENTRY POINT\nexport default function InsertionSort(\n    nums: number[],\n    speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean) \n{\n    mainArray = new Array(nums.length)\n    mainArray = Object.assign([], nums )\n\n    ANIMATION_SPEED = 200 - speed;\n    animations = [];\n\n    // actual algo\n    let size = mainArray.length;\n    for (let x = 1; x < size; x++)\n    {\n        animations.push([CHANGE, x, x-1])\n        animations.push([REVERT, x, x-1])\n\n        if (!descending) {\n            if (mainArray[x - 1] > mainArray[x])\n            {\n                for (let y = x; y > 0; y--)\n                {\n                    animations.push([CHANGE, y, y-1])\n                    animations.push([REVERT, y, y-1])\n\n                    if (mainArray[y] < mainArray[y - 1]) {\n\n                        animations.push([SWAP_CHANGE, y, y-1])\n                        animations.push([SWAP_REVERT, y, y-1])\n\n                        const temp = mainArray[y];\n                        mainArray[y] = mainArray[y - 1]\n                        mainArray[y - 1] = temp\n                    }\n                }\n            }            \n        }\n        else {\n            if (mainArray[x - 1] < mainArray[x])\n            {\n                for (let y = x; y > 0; y--)\n                {\n                    animations.push([CHANGE, y, y-1])\n                    animations.push([REVERT, y, y-1])\n\n                    if (mainArray[y] > mainArray[y - 1]) {\n\n                        animations.push([SWAP_CHANGE, y, y-1])\n                        animations.push([SWAP_REVERT, y, y-1])\n\n                        const temp = mainArray[y];\n                        mainArray[y] = mainArray[y - 1]\n                        mainArray[y - 1] = temp\n                    }\n                }\n            }\n        }\n    }\n\n    if (returnFrames) return animations;\n    animate();\n    callback(animations.length)\n}\n    ","import {\n    changeColor,\n    changeHeight,\n    ACC, RED, PURPLE, GREEN\n}\n    from './template.functions'\n\n// ======================================= dependent Variables\nlet ANIMATION_SPEED = 40;\nlet mainArray = [] as any;\n// containers of Animation Sequence\nlet animations = [] as any;\n\n// ======================================= constants \n// this will be use for identifyig \n// animation sequences\nconst CHANGE = \"change\";\nconst REVERT = \"revert\";\nconst SWAP_CHANGE = \"swap_change\";\nconst SWAP_REVERT = \"swap_revert\";\n\n// =========================================== ANIMATE\n\nfunction animate() {\n    \n    for (let x = 0; x < animations.length; x++) {\n        const STATE = animations[x][0];\n        const VALUE_1 = animations[x][1];\n        const VALUE_2 = animations[x][2];\n        if (STATE === CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, PURPLE);\n                changeColor(VALUE_2, RED);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === REVERT) {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n        else if (STATE === SWAP_CHANGE) {\n            setTimeout(() => {\n                changeColor(VALUE_1, GREEN);\n                changeColor(VALUE_2, GREEN);\n                changeHeight(VALUE_1, mainArray[VALUE_1]);\n                changeHeight(VALUE_2, mainArray[VALUE_2]);\n            }, x * ANIMATION_SPEED);\n        }\n        else {\n            setTimeout(() => {\n                changeColor(VALUE_1, ACC);\n                changeColor(VALUE_2, ACC);\n            }, x * ANIMATION_SPEED);\n        }\n    }\n}\n\n\n// =========================================== ENTRY POINT\nexport default function SelectionSort(\n    nums: number[],\n    speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean)\n{\n    mainArray = new Array(nums.length)\n    mainArray = Object.assign([], nums)\n\n    ANIMATION_SPEED = 200 - speed;\n    animations = [];\n\n    // act ual algo\n    let size = mainArray.length\n    var i: number, j: number, min_idx: number;\n\n    for (i = 0; i < size - 1; i++)\n    {\n        min_idx = i;\n\n        for (j = i + 1; j < size; j++) {\n            \n            animations.push([CHANGE, j, min_idx])\n            animations.push([REVERT, j, min_idx])\n            if (descending) {\n                if (mainArray[j] > mainArray[min_idx]) min_idx = j;\n            }\n            else {\n                if (mainArray[j] < mainArray[min_idx]) min_idx = j;\n            }\n        }\n        animations.push([SWAP_CHANGE, i, min_idx])\n        animations.push([SWAP_REVERT, i, min_idx])\n\n        const temp = mainArray[min_idx]\n        mainArray[min_idx] = mainArray[i]\n        mainArray[i] = temp;\n    }\n    // animations start\n    if (returnFrames) return animations;\n    animate();\n    callback(animations.length)    \n}\n\nexport function BubbleSort(\n    nums: number[],\n    speed: number,\n    descending: boolean,\n    callback: Function,\n    returnFrames?: boolean)\n{\n    mainArray = new Array(nums.length)\n    mainArray = Object.assign([], nums)\n\n    ANIMATION_SPEED = 200 - speed;\n    animations = [];\n\n    // act ual algo\n    let size = mainArray.length\n\n    for (let i = 0; i < size - 1; i++)\n    {\n        let swapped = false;\n        for (let j = 0; j < size - 1 - i; j++) {\n\n            animations.push([CHANGE, j, j+1])\n            animations.push([REVERT, j, j+1])\n\n            if (!descending) {\n                if (mainArray[j] > mainArray[j+1]) {\n                    animations.push([SWAP_CHANGE, j, j+1])        \n                    animations.push([SWAP_REVERT, j, j+1])  \n                    const temp = mainArray[j]      \n                    mainArray[j] = mainArray[j+1]\n                    mainArray[j+1] = temp;\n                    swapped = true;\n                }\n            }\n            else {\n                if (mainArray[j] < mainArray[j+1]) {\n                    animations.push([SWAP_CHANGE, j, j+1])        \n                    animations.push([SWAP_REVERT, j, j+1])   \n                    const temp = mainArray[j]     \n                    mainArray[j] = mainArray[j+1]\n                    mainArray[j+1] = temp;\n                    swapped = true;\n                }\n            }\n        }\n        if(swapped == false) break;\n    }\n    // animations start\n    if (returnFrames) return animations;\n    animate();\n    callback(animations.length)    \n}","import { useState, memo } from 'react';\nimport { Box } from '@material-ui/core';\nimport Button from '../../components/buttons/Button';\nimport ButtonAccent from '../../components/buttons/ButtonAccent';\nimport ToggleButton from '../../components/buttons/ToggleButton';\nimport Slider from '../../components/inputs/slider';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\n// Algorithms\nimport MergeSort from './sortingAlgorithms/MergeSort';\nimport QuickSort from './sortingAlgorithms/QuickSort';\nimport HeapSort from './sortingAlgorithms/HeapSort';\nimport InsertionSort from './sortingAlgorithms/InsertionSort';\nimport SelectionSort from './sortingAlgorithms/SelectionSort';\nimport { BubbleSort } from './sortingAlgorithms/SelectionSort';\n\n// this indicates that the page loads for the first time\nlet first = true;\nfunction SortingVisualizer(props: any): JSX.Element {\n\n   const [algoOptionsOpen, set_algoOptionsOpen] = useState(false);\n   const [chosenAlgo, set_chosenAlgo] = useState(\"Choose an algorithm\");\n   const [sortingSpeed, set_sortingSpeed] = useState(180);\n   const [sortDisabled, set_sortDisabled] = useState(true);\n   const [generateBtn_disabled, set_generateBtn_disabled] = useState(false);\n   const [arraySizeButton, set_arraySizeButton] = useState(false);\n   const [sortSpeed, set_sortSpeed] = useState(false);\n   const [descending, set_descending] = useState(false);\n   const [disableDescending, set_disableDescending] = useState(false);\n   const sortingAlgoList = [\n      \"Merge Sort\", \"Quick Sort\", \"Heap Sort\", \"Insertion Sort\",\n      \"Selection Sort\", \"Bubble Sort\"\n   ];\n\n   const [arraySize, set_arraySize] = useState(150)\n\n   // random numbers generator range from 2 to 300\n   function generateRandom(size: number) {\n      let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\n      for (let x = 0; x < bars.length; x++) {\n         if (bars[x]) {\n            bars[x].style.backgroundColor = \"#80ED99\"\n            bars[x].style.transition = '.2s ease';\n         }\n      }\n      const array = [];\n      for (let x = 0; x < size; x++) {\n         const random = Math.floor(Math.random() * (300 - 2 + 1) + 2)\n         array.push(random);\n      }\n      return array;\n   }\n   // THe State Randome Numbers Array\n   const [randomNumbers, set_randomNumbers] = useState(generateRandom(150));\n\n   function changeArraySize(n: any) {\n      set_arraySize(n);\n      set_randomNumbers(generateRandom(n));\n      if (!first) {\n         set_sortDisabled(false);\n      }\n   }\n\n   function sort() {\n      // check what algorithm to be use\n      let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\n      for (let x = 0; x < bars.length; x++) {\n         if (bars[x]) {\n            bars[x].style.backgroundColor = \"red\"\n         }\n      }\n      const index = sortingAlgoList.indexOf(chosenAlgo)\n      first = false;\n      set_sortDisabled(true);\n      set_arraySizeButton(true);\n      set_sortSpeed(true);\n      set_generateBtn_disabled(true)\n      set_disableDescending(true)\n\n      if (index === 0) MergeSort(randomNumbers, sortingSpeed, descending, enablePanels);\n      else if (index === 1) QuickSort(randomNumbers, sortingSpeed, descending, enablePanels)\n      else if (index === 2) HeapSort(randomNumbers, sortingSpeed, descending, enablePanels);\n      else if (index === 3) InsertionSort(randomNumbers, sortingSpeed, descending, enablePanels);\n      else if (index === 4) SelectionSort(randomNumbers, sortingSpeed, descending, enablePanels);\n      else if (index === 5) BubbleSort(randomNumbers, sortingSpeed, descending, enablePanels);\n   }\n\n   function enablePanels(t: number) {\n      setTimeout(() => {\n         set_generateBtn_disabled(false)\n         set_arraySizeButton(false);\n         set_sortSpeed(false);\n         set_disableDescending(false);\n      }, t * (200 - sortingSpeed))\n   }\n\n   function changeSpeed(n: number) {\n      set_sortingSpeed(n);\n   }\n\n   return (\n      <Box\n         p={4}\n         className=\"flat\"\n         style={{\n            width: '98vw', height: '80vh', position: 'relative',\n            margin: 'auto', top: '1rem', overflow: 'hidden',\n            borderRadius: '10px'\n         }}>\n\n\n         <Box id=\"sorting-windows\">\n            <div className=\"bars-container\">\n               <div className=\"algo-options\">\n                  <Box className={\"sorting-algorithms\"} hidden={!algoOptionsOpen} >\n                     <div style={{ pointerEvents: 'none' }} > <Box p={2} pl={1}>  </Box> </div>\n                     {\n                        sortingAlgoList.map((algo: any, index: number) =>\n                           <div key={index}> <Box p={1} pl={2} onClick={() => {\n                              set_chosenAlgo(algo);\n                              set_algoOptionsOpen(false);\n                              set_sortDisabled(false)\n                           }} > {algo} </Box> </div>\n                        )\n                     }\n                  </Box>\n                  <Box flex={1} onClick={() => { set_algoOptionsOpen(!algoOptionsOpen) }} >\n                     {chosenAlgo}\n                  </Box>\n                  <Box onClick={() => { set_algoOptionsOpen(!algoOptionsOpen) }} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" > <ArrowDropDownIcon /> </Box>\n               </div>\n               {\n                  randomNumbers.map((num: number, index: number) =>\n                     <div className=\"bars\" style={{ height: num + 'px' }} key={index} > </div>\n                  )\n               }\n            </div>\n\n         </Box>\n\n         <div id=\"scroll\" >\n\n            <Box className=\"sorting-panel\">\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <Button disabled={generateBtn_disabled} label=\"Generate New Array\" handleClick={() => {\n                     set_randomNumbers(generateRandom(arraySize));\n                     if (!first) {\n                        set_sortDisabled(false);\n                        first = false;\n                     }\n                  }} />\n               </Box>\n\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <Box pb={1} textAlign=\"center\" > Change Array Size </Box>\n                  <Slider disabled={arraySizeButton} id=\"array_size\" onInput={(n: any) => changeArraySize(n)} color=\"accent\" min={5} max={300} value={arraySize} />\n               </Box>\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <Box pb={1} textAlign=\"center\" > Change Speed </Box>\n                  <Slider disabled={sortSpeed} id=\"sorting-speed\" onInput={(n: any) => changeSpeed(n)} color=\"error\" min={5} max={198} value={sortingSpeed} />\n               </Box>\n               <Box m={2} style={{ position: 'relative', bottom: '2px' }} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <Box pb={1} textAlign=\"center\" > Descending </Box>\n                  <ToggleButton disabled={disableDescending} toggleOn={descending} color=\"accent\" title=\"Descending\" handleClick={() => {\n                     set_descending(!descending);\n                     if (!first) {\n                        set_sortDisabled(false)\n                        first = false;\n                     }\n                  }} />\n               </Box>\n\n               <Box m={1} display=\"flex\" flexDirection=\"column\" alignContent=\"center\" justifyContent=\"center\">\n                  <ButtonAccent label=\"Sort !\" disabled={sortDisabled} handleClick={sort} title=\"Start sorting\" type=\"error\" />\n               </Box>\n            </Box>\n         </div>\n      </Box>\n   )\n}\nexport default memo(SortingVisualizer);","\nexport default function TextInput (props: any)\n{\n\n    return (\n        <input \n            type={props.type}\n            className={\"thin-inset textInput\"}\n            placeholder={props.placeHolder}\n            autoFocus={props.autofocus}\n            onInput={(event: any) => {\n                const value = event.target.value;\n                props.handleInput(value)\n            }}\n            id={props.id}\n            style={{color: props.error ? '#FF555D' : 'white',\n                    width: props.fullWidth ? '100%': 'auto'}}\n            />\n    )\n}","let FOUND = 1;\nlet CHANGE_COLOR = 0;\nlet REVERT_COLOR = -1;\n\ninterface Frame {\n   state: number, // the options are the variables above\n   lookupIndex: number, // the index in the array\n   steps: number // steps it takes to find\n}\n\nlet LINEAR_SEARCH_ANIMATIONS = [] as Frame[];\nlet BINARY_SEARCH_ANIMATIONS = [] as Frame[];\n\nexport default function getAnimations(array: number[], searchItem: number) {\n   // call this first...\n   resetAnimations();\n   fill_LinearAnimationFrames(array, searchItem);\n   fill_BinaryAnimationFrames(array, searchItem);\n\n   return [\n      LINEAR_SEARCH_ANIMATIONS,\n      BINARY_SEARCH_ANIMATIONS\n   ];\n}\n\nfunction resetAnimations() {\n   LINEAR_SEARCH_ANIMATIONS = []\n   BINARY_SEARCH_ANIMATIONS = []\n}\n\n// -----> fill linear animation frams\nfunction fill_LinearAnimationFrames(array: number[], searchItem: number) {\n   for (let x = 0; x < array.length; x++) {\n      let newFrame: Frame;\n      if (array[x] == searchItem) {\n         newFrame = {\n            state: FOUND,\n            lookupIndex: x, // the index where the saerchItem were found\n            steps: x + 1 // the steps it takes two find the searchItem\n         }\n         LINEAR_SEARCH_ANIMATIONS.push(newFrame);\n         // FOR DEBUGGING PURPOSES\n         // alert(`${searchItem} has been found at index ${x}`)\n         return;\n      }\n      else {\n         // push a frame where that indicates to change color\n         newFrame = {\n            state: CHANGE_COLOR,\n            lookupIndex: x, // current index where we look at\n            steps: x + 1\n         }\n         LINEAR_SEARCH_ANIMATIONS.push(newFrame);\n         // here we need to push another one to change the color back to normal\n         newFrame = {\n            state: REVERT_COLOR,\n            lookupIndex: x, // current index where we look at\n            steps: x + 1\n         }\n         LINEAR_SEARCH_ANIMATIONS.push(newFrame);\n      }\n   }\n}\n\n// -----> BINARY SEARCH\nfunction fill_BinaryAnimationFrames(array: number[], searchItem: number) {\n   let sortedArray = new Array(array.length);\n   sortedArray = Object.assign([], array);\n   sortedArray = sortedArray.sort((a: number, b: number) => a - b);\n   // console.log(searchItem)\n   // console.log(sortedArray)\n   binSearch(\n      sortedArray,\n      searchItem,\n      0,\n      sortedArray.length - 1,\n      0\n   )\n}\n\nfunction binSearch(\n   sortedArray: number[],\n   searchItem: number,\n   lowerBound: number,\n   upperBound: number,\n   NoOfSteps: number): number {\n\n   if (lowerBound > upperBound) return -1;\n\n   NoOfSteps += 1;\n   let midIndex = (upperBound + lowerBound + 1) / 2;\n   midIndex = Math.floor(midIndex);\n   let midElement = sortedArray[midIndex];\n\n   let newFrame: Frame;\n\n   if (midElement == searchItem) {\n      newFrame = {\n         state: FOUND,\n         lookupIndex: midIndex,\n         steps: NoOfSteps\n      }\n      BINARY_SEARCH_ANIMATIONS.push(newFrame);\n      // FOR DEBUGGING PURPOSES\n      // alert(`found at index ${midIndex}`)\n      return midIndex;\n   }\n   // if not the middle check the lower bound\n   // if the searchItem is less than mid Element\n   newFrame = {\n      state: CHANGE_COLOR,\n      lookupIndex: midIndex,\n      steps: NoOfSteps\n   }\n   BINARY_SEARCH_ANIMATIONS.push(newFrame);\n   newFrame = {\n      state: REVERT_COLOR,\n      lookupIndex: midIndex,\n      steps: NoOfSteps\n   }\n   BINARY_SEARCH_ANIMATIONS.push(newFrame);\n\n   if (searchItem < midElement) {\n      return binSearch(\n         sortedArray,\n         searchItem,\n         lowerBound,\n         midIndex - 1,\n         NoOfSteps\n      )\n   }\n   // otherwise\n   return binSearch(\n      sortedArray,\n      searchItem,\n      midIndex + 1,\n      upperBound,\n      NoOfSteps\n   )\n}","import { useState, useEffect, useRef, memo } from 'react'\nimport { Box } from '@material-ui/core';\nimport TextField from '../../inputs/TextField';\nimport ButtonAccent from '../../buttons/ButtonAccent';\nimport Button from '../../buttons/Button';\nimport getAnimations from './searchingAlgorithms';\n\nfunction SearchingVisualizer()\n{\n   // ---> States\n   const [searchSize, setSearchSize] = useState(200)\n   const [searchItem, setsearchItem] = useState(-1);\n   const [searchArray, setSearchArray] = useState(generateRandom(searchSize));\n   const [searchSpeed, setSearchSpeed] = useState(300);\n   const SortedsearchArray = useRef(sorted());\n\n   const [linearSearchMessage, set_linearSearchMessage] = useState(\"Linear Search\")\n   const [binarySearchMessage, set_binarySearchMessage] = useState(\"Binary Search\")\n   const [linearMessageColor, setLinearMessageColor] = useState(\"white\")\n   const [binaryMessageColor, setBinaryMessageColor] = useState(\"white\")\n   const [timeouts, setTimeouts] = useState([] as any)\n   const [lfound, setlfound] = useState(false)\n   const [bfound, setbfound] = useState(false)\n\n   // -----> UseEffect\n\n   useEffect(() => {\n      SortedsearchArray.current = sorted()\n   }, [searchArray])\n\n\n   // ---> Functions\n\n   function animate(animationFrames: any[], CLASSNAME: string) {\n      let CHANGE_COLOR = 0;\n      let REVERT_COLOR = -1;\n      const numberOfFrames = animationFrames.length;\n\n      for (let x = 0; x < numberOfFrames; x++) {\n         const frame = animationFrames[x];\n         const state = frame.state\n         const steps = frame.steps\n         const index = frame.lookupIndex\n         // const accent = '#0AFFEF';\n         const red = '#dd6f74';\n         if (state === CHANGE_COLOR) executeFrame(CLASSNAME, index, red, x)\n         else if (state === REVERT_COLOR) executeFrame(CLASSNAME, index, red, x)\n         else {\n            executeFrame(CLASSNAME, index, 'yellowgreen', x)\n            if (CLASSNAME === 'linear-bar') {\n               changeMessage('linear-bar', index, steps, x);\n            }\n            else {\n               changeMessage('binary-bar', index, steps, x);\n            }\n            return;\n         }\n      }\n   }\n\n   function changeMessage(CLASSNAME: string, index: number, steps: number, ms: number) {\n      timeouts.push(setTimeout(() => {\n         if (CLASSNAME === 'binary-bar') {\n            setbfound(true);\n            set_binarySearchMessage(`Found at index ${index} in ${steps} steps.`);\n            setBinaryMessageColor('yellowgreen');\n            return;\n         }\n         setlfound(true);\n         set_linearSearchMessage(`Found at index ${index} in ${steps} steps.`);\n         setLinearMessageColor('yellowgreen');\n      }, ms * (301 - searchSpeed)))\n   }\n\n   function executeFrame(CLASSNAME: string, x: number, COLOR: string, ms: number) {\n      timeouts.push(\n         setTimeout(() => {\n            changeColor(CLASSNAME, x, COLOR);\n         }, ms * (301 - searchSpeed)))\n   }\n\n   function changeColor(CLASSNAME: string, index: number, COLOR: string) {\n      const items = (document.getElementsByClassName(CLASSNAME) as HTMLCollectionOf<HTMLElement>)\n      if (items[index]) {\n         items[index].style.backgroundColor = COLOR;\n      }\n   }\n\n   function searchNow() {\n      setlfound(false)\n      setbfound(false)\n      if (searchItem < 0) {\n         alert('Please input a positive integer.')\n         return;\n      }\n\n      for (let x = 0; x < searchArray.length; x++) {\n         changeColor('linear-bar', x, '#0AFFEF')\n         changeColor('binary-bar', x, '#0AFFEF')\n      }\n\n      set_binarySearchMessage('Searching binary...')\n      set_linearSearchMessage('Searching linearly...');\n      setBinaryMessageColor('rgba(255,255,255,.7)')\n      setLinearMessageColor('rgba(255,255,255,.7)')\n\n      let ANIMATIONS = getAnimations(searchArray, searchItem)\n      let LINEAR_ANIMATION = ANIMATIONS[0]\n      let BINARY_ANIMATION = ANIMATIONS[1]\n\n      animate(LINEAR_ANIMATION, 'linear-bar');\n\n      if (LINEAR_ANIMATION.length === searchArray.length * 2) {\n         timeouts.push(setTimeout(() => {\n            set_linearSearchMessage(`Item ${searchItem} not found.`)\n            setLinearMessageColor('red')\n         }, (searchArray.length * 2) * (301 - searchSpeed)))\n      }\n\n      animate(BINARY_ANIMATION, 'binary-bar');\n      let binarySearchWorstTime = (Math.floor(Math.log2(searchArray.length)) * 2);\n\n      if (BINARY_ANIMATION.length === binarySearchWorstTime || BINARY_ANIMATION.length === binarySearchWorstTime+2) {\n         timeouts.push(setTimeout(() => {\n            setbfound(true);\n            set_binarySearchMessage(`Item ${searchItem} not found.`)\n            setBinaryMessageColor('red')\n         }, (binarySearchWorstTime) * (301 - searchSpeed)))\n      }\n   }\n\n   function changeSize(newSize: number) {\n      setSearchSize(newSize);\n      setSearchArray(generateRandom(searchSize));\n   }\n\n   function sorted() {\n      let copy = new Array(searchArray.length)\n      copy = Object.assign([], searchArray)\n      copy = copy.sort((a: number, b: number) => a - b)\n      return copy;\n   }\n\n   function generateRandom(size: number) {\n      let bars = (document.getElementsByClassName('bars') as HTMLCollectionOf<HTMLElement>)\n      const array = [];\n      for (let x = 0; x < size; x++) {\n         const random = Math.floor(Math.random() * (110 - 1 + 1) + 1)\n         array.push(random);\n      }\n      return array;\n   }\n\n\n\n   // ---> MARK UP\n   return (\n      <Box\n         p={4}\n         className=\"flat searchVisualizerContainer \"\n         style={{\n            width: '98vw', height: '80vh', position: 'relative',\n            margin: 'auto', top: '1rem', overflow: 'hidden',\n            borderRadius: '10px'\n         }}>\n         <Box\n            display=\"flex\"\n            className=\"searchItemInput rgba2 transparent\" >\n            <Box\n               margin=\"auto\"\n               flex={1}\n               className=\"transparent\">\n               <Box component=\"span\" mr={1}>Search for :</Box>\n               <TextField\n                  handleInput={(n: number) => {\n                     setsearchItem(n);\n                  }}\n                  type=\"number\"\n                  placeHolder=\"Any positive integer\" />\n            </Box>\n         </Box>\n         <Box\n            className=\"linearSearch rgba2\" >\n            <h3 className=\"searchLabel\" style={{ color: linearMessageColor }} > {linearSearchMessage} </h3>\n            <div>\n               {searchArray.map((each: number, idx: number) =>\n                  <div\n                     style={{ height: `${each}px` }}\n                     key={idx}\n                     className=\"linear-bar\" >\n                  </div>\n               )}\n            </div>\n         </Box>\n         <Box\n            className=\"binarySearch rgba2\" >\n            <h3 className=\"searchLabel\" style={{ color: binaryMessageColor }} > {binarySearchMessage} </h3>\n            <div>\n               {\n                  SortedsearchArray.current.map((each: number, idx: number) =>\n                     <div\n                        style={{ height: `${each}px` }}\n                        key={idx}\n                        className=\"binary-bar\">\n                     </div>\n                  )}\n            </div>\n         </Box>\n         <Box\n            className=\"searchingVisualizerPanel rgba2\" >\n            <div>\n               <Box\n                  ml={2} mr={2}>\n                  <Button label=\"New Array\" handleClick={() => {\n                     setSearchArray(generateRandom(searchSize))\n                     for (let x = 0; x < searchArray.length; x++) {\n                        changeColor('linear-bar', x, '#0AFFEF')\n                        changeColor('binary-bar', x, '#0AFFEF')\n                     }\n                     setLinearMessageColor(\"white\")\n                     setBinaryMessageColor(\"white\")\n                     set_binarySearchMessage(\"Binary Search\")\n                     set_linearSearchMessage(\"Linear Search\")\n                  }} />\n               </Box>\n               <Box\n                  ml={2} mr={2}\n                  display=\"flex\"\n                  flexDirection=\"column\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\">\n                  <Box p={1} >Change Size</Box>\n                  <input\n                     id=\"searchArray-change-size-slider\"\n                     type=\"range\"\n                     onInput={(event: any) => { changeSize(event.target.value) }}\n                     value={searchSize}\n                     min={10}\n                     max={300} />\n               </Box>\n               <Box\n                  ml={2} mr={2}\n                  display=\"flex\"\n                  flexDirection=\"column\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\">\n                  <Box p={1}>Change Speed</Box>\n                  <input\n                     id=\"searchArray-change-speed-slider\"\n                     type=\"range\"\n                     value={searchSpeed}\n                     onInput={(event: any) => { setSearchSpeed(event.target.value) }}\n                     min={10}\n                     max={200} />\n               </Box>\n               <Box\n                  ml={2} mr={2}>\n                  <ButtonAccent\n                     type=\"accent\"\n                     label=\"Search\"\n                     handleClick={searchNow} />\n               </Box>\n               <Box\n                  ml={2} mr={2}>\n                  <ButtonAccent\n                     type=\"error\"\n                     label=\"stop\"\n                     handleClick={() => {\n                        for (const each of timeouts) {\n                           clearTimeout(each);\n                        }\n                        if (!lfound) {\n                           set_linearSearchMessage(\"Search stopped.\")\n                           setLinearMessageColor('yellow')\n                        }\n                        if (!bfound) {\n                           set_binarySearchMessage(\"Search stopped.\")\n                           setBinaryMessageColor('yellow')\n                        }\n                     }} />\n               </Box>\n            </div>\n         </Box>\n      </Box>\n   )\n}\nexport default memo(SearchingVisualizer);","import {useState} from 'react';\nimport {Box} from '@material-ui/core';\nimport AppBar from './components/AppBar';\n\nimport SortingVisualizer from './components/visualizers/SortingVisualizer';\nimport SearchingVisualizer from './components/visualizers/searching/SearchingVisualizer';\n\nimport './sass/main.css';\n\nfunction App () {\n\n   const [currentOpenTab, set_currentOpenTab] = useState(0);\n\n   function changeTab (n: number) {\n      set_currentOpenTab(n);\n   }\n\n   return (\n      <Box>\n         <AppBar handleChangeTab={changeTab} />\n\n         <Box\n            hidden={currentOpenTab !== 0}\n            mt={3}\n            className=\"f-color1\" >\n\n            <SortingVisualizer />\n         </Box>\n         <Box\n            hidden={currentOpenTab !== 1}\n            mt={3}\n            className=\"f-color1\" >\n\n            <SearchingVisualizer />\n         </Box>\n      </Box>\n   );\n}\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}